import asyncio
import logging
import aiocron
import gspread
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, Poll, PollAnswer
from aiogram.filters import Command
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –∏–∑ BotFather
BOT_TOKEN = "7574629305:AAGyXwXdqp55H-r6qqyFgUGqdYknQ9iLZLc"

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def connect_to_google_sheets():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    creds = ServiceAccountCredentials.from_json_keyfile_name("tg-bot-454109-5f09ec8f1c5b.json", scope)
    client = gspread.authorize(creds)

    sheet = client.open("–§–∏–ª—å–º—ã").sheet1  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return sheet

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ —Ñ–∏–ª—å–º–∞–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—Ñ–∏–ª—å–º –ù–∞–∑–≤–∞–Ω–∏–µ–§–∏–ª—å–º–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å–º.")


# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
film_suggestions = set()
poll_results = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤
poll_id = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
chat_id = -4642887339

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /—Ñ–∏–ª—å–º –ù–∞–∑–≤–∞–Ω–∏–µ–§–∏–ª—å–º–∞
@dp.message(Command("—Ñ–∏–ª—å–º"))
async def suggest_film(message: Message):
    args = message.text.split(maxsplit=1)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    if len(args) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞. –ü—Ä–∏–º–µ—Ä:\n/—Ñ–∏–ª—å–º –ú–∞—Ç—Ä–∏—Ü–∞")
        return

    film_name = args[1].strip()

    #special for liza
    if len(film_name) == len("—Ç–∏—Ç–∞–Ω–∏–∫"):
        film = film_name.lower()    
        if (film[0] == "—Ç" or film[0] == "t") and (film[2] == "—Ç" or film[2] == "t") and 
            (film[3] == "–∞" or film[3] == "a") and (film[4] == "–Ω" or film[4] == "h") and 
            (film[-1] == "–∫" or film[-1] == "k"):
            await  message.answer(f"–ù–∏–∫–∞–∫–æ–≥–æ –±–ª—è—Ç—å –¢–∏—Ç–∞–Ω–∏–∫–∞!!!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ñ–∏–ª—å–º–∞ –≤ —Å–ø–∏—Å–∫–µ
    if film_name.lower() in (name.lower() for name in film_suggestions):
        await message.answer(f"–§–∏–ª—å–º '{film_name}' —É–∂–µ –±—ã–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω!")
    else:
        film_suggestions.add(film_name)
        await message.answer(f"–§–∏–ª—å–º '{film_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!")

@dp.message(Command("—Ñ–æ—Ç–æ"))
async def take_all_photos(message: Message):
    if !check_command(message):
        return
    sunday = get_prev_sunday()    #–∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏—è
                                  #–Ω–∞—á–∏–Ω–∞—è —Å –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏—è –¥–æ –ø–Ω (–æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–Ω –µ—â–µ –¥—É–º–∞—é) 
                                  #–Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫
    return

#special for CBOdron or Apollon
@dp.message(Command("–∞–Ω–µ–∫–¥–æ—Ç"))
async def tell_anekdot(message : Message):
    if !check_command(message):
        return

    #–ù—É–∂–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –∑–∞—Ö–æ–¥–∏–ª –∏ –∏—Å–∫–∞–ª –∞–Ω–µ–∫–¥–æ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∏—Ö
    await message.answer()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
def check_command(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
        return False
    return True
    
async def scheduled_poll():
    global poll_id, poll_results

    if not film_suggestions:
        await bot.send_message(chat_id, "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ñ–∏–ª—å–º—ã üòï")
        return
    elif len(film_suggestions) == 1:
        only_film = next(iter(film_suggestions))
        await bot.send_message(chat_id, f"–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∏–ª—å–º: {only_film} üé¨")
        film_suggestions.clear()
        return

    films_list = list(film_suggestions)
    film_suggestions.clear()

    poll_message = await bot.send_poll(
        chat_id=chat_id,
        question="–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å?",
        options=films_list,
        is_anonymous=False,
        allows_multiple_answers=True
    )

    sunday    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    poll_id = poll_message.poll.id
    print(f"Poll ID: {poll_id}")

    poll_results = {option: 0 for option in films_list}

    # –û–∂–∏–¥–∞–µ–º 24 —á–∞—Å–∞ (–¥–æ —Å—É–±–±–æ—Ç—ã –≤ 5 –≤–µ—á–µ—Ä–∞) –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    await asyncio.sleep(86400)  #86400 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    max_votes = max(poll_results.values())
    winners = [film for film, votes in poll_results.items() if votes == max_votes]

    if len(winners) == 1:
        await bot.send_message(chat_id, f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {winners[0]} —Å {max_votes} –≥–æ–ª–æ—Å–∞–º–∏!")
        await save_winner_to_google_sheets(winners[0])
    else:
        await bot.send_message(chat_id, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–∏—á—å—è! –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.")

        second_poll_message = await bot.send_poll(
            chat_id= chat_id,
            question= "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å?",
            options= winners,
            is_anonymous= False,
            allows_multiple_answers=True
        )

        poll_id = second_poll_message.poll.id
        poll_results = {option: 0 for option in winners}

        await asyncio.sleep(86400/2)

        second_max_votes = max(poll_results.values())
        final_winners = [film for film, votes in poll_results.items() if votes == second_max_votes]

        if len(final_winners) == 1:
            await bot.send_message(chat_id, f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {final_winners[0]}!")
            await save_winner_to_google_sheets(final_winners[0])
        else:
            await bot.send_message(chat_id, "–°–Ω–æ–≤–∞ –Ω–∏—á—å—è! –í—Å–µ —Ñ–∏–ª—å–º—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ç–∞–±–ª–∏—Ü—É.")
            for film in final_winners:
                await save_winner_to_google_sheets(film)


@dp.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer):
    global poll_results, poll_id

    if poll_id and poll_answer.poll_id == poll_id:
        for option_id in poll_answer.option_ids:
            option_text = list(poll_results.keys())[option_id]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
            poll_results[option_text] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤


#aiocron.crontab("*/1 * * * *", func=scheduled_poll)
def get_prev_sunday():
    today = datetime.today()
    days_hps_sunday = (6 - today.weekday()) % 7
    if days_hps_sunday == 0:
        days_hps_sunday = -7
    prev_sunday = today - timedelta(days=days_hps_sunday)
    return prev_sunday.strftime("%d.%m.%y")
    
def get_next_sunday():
    today = datetime.today()
    days_until_sunday = (6 - today.weekday()) % 7  # 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, weekday() –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    if days_until_sunday == 0:
        days_until_sunday = 7  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
    next_sunday = today + timedelta(days=days_until_sunday)
    return next_sunday.strftime("%d.%m.%y")

async def start_rating_poll(winner: str):
    poll_message = await bot.send_poll(
        chat_id=chat_id,
        question=f'–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º "{winner}" –æ—Ç 1 –¥–æ 10!',
        options=[str(i) for i in range(1, 11)],
        is_anonymous=False,
        allows_multiple_answers=False
    )

    global poll_id, poll_results
    poll_id = poll_message.poll.id
    poll_results = {str(i): 0 for i in range(1,11)}

    await asyncio.sleep(43200)

    await calculate_rating()

async def calculate_rating():
    total_votes = sum(poll_results.values())
    if total_votes == 0:
        await bot.send_message(chat_id, "–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –æ—Ü–µ–Ω–∫—É —Ñ–∏–ª—å–º–∞ üòï")
        return

    total_score = sum(int(score) * votes for score, votes in poll_results.items())
    avg_rating = round(total_score / total_votes, 1)

    await bot.send_message(chat_id, f'–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ñ–∏–ª—å–º–∞: {avg_rating} ‚≠ê')

    sheet = connect_to_google_sheets()
    last_row = len(sheet.get_all_values())
    sheet.update_cell(last_row, 4, avg_rating)

async def save_winner_to_google_sheets(winner: str):
    sheet = connect_to_google_sheets()
    sunday_date = get_next_sunday()
    time = "22:00"

    sheet.append_row([winner, sunday_date, time])
    print(f'–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü—É: {winner} ({sunday_date} –≤ {time})')

    now = datetime.now()
    monday_1am = now.replace(hour=1, minute=0, second=0, microsecond=0) + timedelta(days=1)
    wait_time = (monday_1am - now).total_seconds()
    print(f'–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑ {wait_time/ 3600:.2f} —á–∞—Å–æ–≤')
    await asyncio.sleep(wait_time)

    await start_rating_poll(winner)

@dp.message(Command("–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"))
async def start_poll(message: Message):
    if not film_suggestions:
        await message.answer("–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å–º –∫–æ–º–∞–Ω–¥–æ–π /—Ñ–∏–ª—å–º.")
        return

    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    films_list = list(film_suggestions)
    film_suggestions.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (poll)
    await bot.send_poll(
        chat_id=message.chat.id,
        question="–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å?",
        options=films_list,
        is_anonymous=False,  # –î–µ–ª–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º
        allows_multiple_answers=True
    )

    await message.answer("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ! üé¨")

@dp.message(Command("–æ—Ü–µ–Ω–∫–∞"))
async def rating_poll(message: Message):
    poll_message = await bot.send_poll(
        chat_id=chat_id,
        question='–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º –æ—Ç 1 –¥–æ 10!',
        options=[str(i) for i in range(1, 11)],
        is_anonymous=False,
        allows_multiple_answers=False
    )

    global poll_id, poll_results
    poll_id = poll_message.poll.id
    poll_results = {str(i): 0 for i in range(1, 11)}

    await asyncio.sleep(3600)

    await calculate_rating()

aiocron.crontab("0 19 * * 5", func=scheduled_poll)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    loop.run_forever()
    #asyncio.run(main())
